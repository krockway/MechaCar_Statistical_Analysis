library(tidyverse)
students <-read_csv("students.csv")
head(students)
setwd("~/Documents/School/Bootcamp/15-Week/15-Lessons/1/Activities")
students <-read_csv("students.csv")
head(students)
students <-read_csv("06_Evr_Tibble/Resources/students.csv")
head(students)
unique(students,[school_name])
unique(students[school_name])
students[school_name] %>% unique()
students$school_name %>% unique()
students[school_name] %>% unique() %>% length()
students$school_name %>% unique() %>% length()
student_count <- students %>% nrow()
paste("There are a total of", student_count, "students.")
mean_reading_score <- students %>% summarise(mean(reading_score))
paste("The average reading score is", mean_reading_score)
mean_math_score <- students %>% summarise(mean(math_score))
paste("The average math score is", mean_math_score)
passing_reading_count <- students %>% filter(reading_score >= 70) %>% nrow()
percentage_passing_reading <- passing_reading_count*100 / student_count %>% round(2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
passing_reading_count <- students %>% filter(reading_score >= 70) %>% nrow()
percentage_passing_reading <- (passing_reading_count*100 / student_count) %>% round(2)
paste(percentage_passing_reading, "% of the students have passing reading scores.")
passing_math_count <- students %>% filter(math_score >= 70) %>% nrow()
percentage_passing_math <- (passing_math_count*100 / student_count) %>% round(2)
paste(percentage_passing_math, "% of the students have passing math scores.")
passing_count <- students %>% filter(math_score >= 70 & reading_score >= 70) %>% nrow()
percentage_passing_overall <- (passing_count*100 / student_count) %>% round(2)
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
school_average_scores <- students %>% group_by(school_name) %>% summarise(avg.reading = mean(reading_score), avg.math = mean(math_score))
school_average_scores <- students %>% group_by(school_name) %>% summarise(avg.reading = mean(reading_score), avg.math = mean(math_score))
school_average_scores
school_grade_scores <- students %>% group_by(school_name, grade) %>% summarise(avg.reading = mean(reading_score), avg.math = mean(math_score))
school_grade_scores
students <- c("Abraham",
"Beatrice",
"Cory",
"Dinah",
"Eric",
"Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class) {
print(student)
}
}
setwd("~/Documents/School/Bootcamp/15-Week/15-Lessons/1/Activities/02_Stu_RBasics/Unsolved")
roll_call(students)
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class) {
#sample will generate a random number; in this case 3 random numbers less than 33
locker_combo <- sample(33,3)
print(student)
print(locker_combo)
}
}
locker_combinations(students)
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
second_letter <- substr(student,2,2)
# Create an if statement to find the names of students where the
# second letter that is an "e".
if (second_letter == "e") {
print(student)
#Give them new combo between 33-66
combination <- sample(33:66,3)
print(combination)
}
}
setwd("~/Documents/School/Bootcamp/15-Week/15-Assignments")
demo_table <- read.csv(file='demo.csv',check.names=F,stringsAsFactors = F)
library(jsonlite)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
all.equal(demo_table3,wide_table)
head(mpg)
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
#Create summary table: # of vehicles per manufacturer
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
#Import into ggplot & create bar chart
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count))
plt + geom_col()
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#rotate the x-axis label 45 degrees
+ theme(axis.text.x=element_text(angle=45,hjust=1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")+ theme(axis.text.x=element_text(angle=45,hjust=1))
#Creat summary table: Toyota MPG by cylinder, by mean highway milesage
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
#plot it
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
View(mpg_summary)
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30))
#Scatter plot: size of engine vs city mpg
#import data
plt <- ggplot(mpg,aes(x=displ,y=cty))
#Plot it with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#Scatter plot: size of engine vs city mpg
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
> plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
#Scatter plot: size of engine vs city mpg
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
#Scatter plot: size of engine vs city mpg vs class
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#Scatter plot: size of engine vs city mpg vs class vs drive
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#Scatter plot: size of engine vs city mpg, point size
plt <- ggplot(mpg,aes(x=displ,y=cty,size =mpg))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", size="MPG")
View(mpg_summary)
head(mpg)
#Scatter plot: size of engine vs city mpg, point size
plt <- ggplot(mpg,aes(x=displ,y=cty, size=cty))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", size="MPG")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/School/Bootcamp/15-Week/15-Lessons/2/Activities/03-Stu_Sardines")
sardines <- read.csv(file="../Resources/sardines.csv")
sardines <- read.csv(file="/Resources/sardines.csv")
sardines <- read.csv(file="Resources/sardines.csv")
sardines <- read.csv(file="../Resources/sardines.csv")
setwd("~/Documents/School/Bootcamp/15-Week/15-Lessons/2/Activities/03-Stu_Sardines/Unsolved")
sardines <- read.csv(file="../Resources/sardines.csv")
View(sardines)
alaska_pop <- subset(sardines, location = 1)
sanDiego_pop <- subset(sardines, location = 6)
t.test(alaska_pop, sanDiego_pop)
alaska_pop <- subset(sardines, location == 1)
mean(alaska_pop[['vertebrae']])
sanDiego_pop <- subset(sardines, location == 6)
mean(sanDiefo_pop[['vertebrae']])
t.test(alaska_pop[['vertebrae']], sanDiego_pop[['vertebrae']])
sanDiego_pop <- subset(sardines, location == 6)
mean(sanDiego_pop[['vertebrae']])
t.test(alaska_pop[['vertebrae']], sanDiego_pop[['vertebrae']])
setwd("~/Documents/School/Bootcamp/15-Week/15-Lessons/2/Activities/05-Stu_ANOVA/Unsolved")
hair <- read.csv(file="../Resources/hair.csv")
View(hair)
View(hair)
ggplot(hair,aes(x=factor(pain),y=HairColour)) + geom_boxplot()
ggplot(hair,aes(x=factor(Pain),y=HairColour)) + geom_boxplot()
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot()
ggplot(hair,aes(x=factor(Pain),y=HairColour)) + geom_boxplot()
summary(aov(HairColour ~ factor(Pain), data=hair))
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot()
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot() +
facet_wrap(~factor(Pain))
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot()
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot()
summary(aov(HairColour ~ factor(Pain), data=hair))
summary(aov(factor(Pain) ~ HairColour, data=hair))
library(ggplot2)
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot()
library(ggplot2)
hair <- read.csv(file="../Resources/hair.csv")
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot()
summary(aov(factor(Pain) ~ HairColour, data=hair))
hair <- read.csv(file="../Resources/hair.csv")
ggplot(hair,aes(x=HairColour,y=factor(Pain))) + geom_boxplot()
ggplot(hair,aes(x=HairColour,y=Pain)) + geom_boxplot()
summary(aov(Pain ~ HairColour, data=hair))
diabetes <- read.csv(file="../Resources/diabetes.csv")
# Plot a scatter plot of bp vs. one year disease progression
ggplot(diabetes, aes(bp, One_Year_Disease_Progress))
+ geom_point()
+ geom_smooth(method = "lm", se = FALSE)
setwd("~/Documents/School/Bootcamp/15-Week/15-Lessons/2/Activities/06-Evr_Fits_and_Regression/Unsolved")
diabetes <- read.csv(file="../Resources/diabetes.csv")
ggplot(diabetes, aes(bp, One_Year_Disease_Progress))
+ geom_point()
+ geom_smooth(method = "lm", se = FALSE)
ggplot(diabetes, aes(bp, One_Year_Disease_Progress)) + geom_point() + geom_smooth(method = "lm", se = FALSE)
reg <- lm(One_Year_Disease_Progress ~ bp, data=diabetes)
summary(reg)
summary(reg)$r.squared
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Heat map
#Summary table:
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
#create heatmap with labels
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
View(mpg_summary)
#Layered plot
#Import data
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
#Add box plot
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
#Overlay scatter plot on top
geom_point()
#create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
#Import into ggplot & plot it
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
#Import into ggplot & plot it
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
#overlay with error bars
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#add boxplot with labels rotated 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#Faceting
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#create multiple boxplots, one for each MPG type
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
#visualize distribution using density plot
ggplot(mtcars,aes(x=wt)) + geom_density()
shapiro.test(mtcars$wt)
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
setwd("~/Documents/School/Bootcamp/15-Week/15-Assignments")
#import used car dataset
population_table <- read.csv('data/used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#import used car dataset
population_table <- read.csv('data/used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
#import dataset into ggplot2
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#Two sample t-test
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
#Two sample t-test
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
#compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
#import dataset
mpg_data <- read.csv('data/mpg_modified.csv')
#select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999)
#select only data points where the year is 2008
mpg_2008 <- mpg_data %>% filter(year==2008)
#compare the mean difference between two samples
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T)
#Anova test, one way
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#Anova test, one way
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
summary(aov(hp ~ cyl,data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point()
setwd("~/Documents/School/Bootcamp/15-Week/15-Assignments/data")
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point()
View(mtcars_filt)
setwd("~/Documents/School/Bootcamp/15-Week/15-Assignments")
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
plt + geom_point()
#calculate correlation coefficient
cor(mtcars$hp,mtcars$qsec)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
head(used_cars)
head(used_cars)
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
setwd("~/Documents/School/Bootcamp/15-Week/15-Assignments/data")
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
head(used_cars)
#calculate correlation coefficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
plt + geom_point()
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
lm(qsec ~ hp,mtcars)
#summarize linear model
summary(lm(qsec~hp,mtcars))
#Plot linear regression line against raw data
#create linear model
model <- lm(qsec ~ hp,mtcars)
#determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
#import dataset into ggplot2
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#plot scatter and red linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
#generate multiple linear regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
table(mpg$class,mpg$year)
tbl <- table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
setwd("~/Documents/School/Bootcamp/15-Week/15-Assignments/MechaCar_Statistical_Analysis")
#install just dplyr:
install.packages("dplyr")
#install just dplyr:
install.packages("dplyr")
install.packages("dplyr")
mpg_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
View(mpg_table)
lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mpg_table)
summary(lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mpg_table))
mpg_LR <- lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mpg_table)
#generate summary statistics
summary(mpg_LR)
suspension_table <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
setwd("~/Documents/School/Bootcamp/15-Week/15-Assignments/MechaCar_Statistical_Analysis/data")
suspension_table <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
total_summary <- summarize(suspension_table)
total_summary <- summary(suspension_table)
View(suspension_table)
total_summary <- suspension_table %>% summarize(PSI=n(), .groups='keep')
total_summary <- suspension_table %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance = var(PSI), SD = sd(PSI))
total_summary <- summary(suspension_table)
#install just dplyr:
install.packages("dplyr")
#Deliverable 1
#Load MPG CSV
mpg_table <- read.csv('MechaCar_mpg.csv',check.names = F,stringsAsFactors = F)
#Perform multiple linear regression
mpg_LR <- lm(vehicle_length ~ vehicle_weight + spoiler_angle + ground_clearance + AWD + mpg,data=mpg_table)
#generate summary statistics
summary(mpg_LR)
#Deliverable 2
#Load Coil CSV
suspension_table <- read.csv('Suspension_Coil.csv',check.names = F,stringsAsFactors = F)
total_summary <- summary(suspension_table)
total_summary.show()
total_summary <- suspension_table %>% summarise(count = n())
